use "../Generic/Generic" as knowledge.
use "../Generic/GenericPercepts" as module.
use ZergDrone as knowledge.

module ZergDroneEvent {
	%%%%%%%%%%%%%%% --------------------------------------- Messaging --------------------------------------- %%%%%%%%%%%%%%%
	
	% Received builder task from the Manager
	if (_).sent:(builder)
		then print("Hi there, I'm a builder!") + insert(builder).
		
	% Received gasCollector task from the Manager
	if (_).sent:(gasCollector)
		then print("Hi there, I'm a gas collector!") + insert(gasCollector).
	
	% If don't know hatchery position yet, ask the manager
	if not(bel(hatcheryPosition(_, _)))
		then (manager).send?(hatcheryPosition).
	
	% If hatchery position is told, insert it in knowledge base
	if (_).sent:(hatcheryPosition(X, Y))
		then insert(hatcheryPosition(X, Y)).
	
	%%%%%%%%%%%%%%% --------------------------------------- Percepts --------------------------------------- %%%%%%%%%%%%%%%
	
	% The generic percepts most units use
	if true
		then GenericPercepts.	
	
	% The handling of the conditions 
	if percept(status(_,_,_,NewCond,_,_)), bel(condition(OldCond), NewCond \= OldCond) 
		then delete(condition(OldCond)) + insert(condition(NewCond)).
	
	% The handling of mineral and gas resources
	if percept(resources(M, _, _, _)), bel(minerals(OM), not(OM == M)) 
		then delete(minerals(OM)) + insert(minerals(M)).
	if percept(resources(_, G, _, _)), bel(gas(OG), not(G == OG)) 
		then delete(gas(OG)) + insert(gas(G)).
	
	% The handling of mineralfields	
	forall percept(mineralField(Id,Amount,_,X,Y)), not(bel(mineralField(Id,Amount,X,Y))) 
		do insert(mineralField(Id,Amount,X,Y)).
	forall bel(mineralField(Id,Amount,X,Y)), not(percept(mineralField(Id,Amount,_,X,Y))) 
		do delete(mineralField(Id,Amount,X,Y)).
		
	% The handling of vespenegeysers
	forall percept(vespeneGeyser(Id,Amount,_,X,Y)), not(bel(vespeneGeyser(Id,Amount,X,Y))) 
		do insert(vespeneGeyser(Id,Amount,X,Y)).
	% forall bel(vespeneGeyser(Id,Amount,X,Y)), not(percept(vespeneGeyser(Id,Amount,_,X,Y))) 
	%	do delete(vespeneGeyser(Id,Amount,X,Y)).
	
	% The handling of the constructionSites
	forall percept(constructionSite(X,Y)), not(bel(constructionSite(X,Y))) 
		do insert(constructionSite(X,Y)).
	forall bel(constructionSite(X,Y)),not(percept(constructionSite(X,Y))) 
		do delete(constructionSite(X,Y)).
	
	% The handling of the workerActivity
	forall percept(workerActivity(Id,Act)), bel(not(workerActivity(Id,Act))) 
		do insert(workerActivity(Id,Act)).
	forall bel(workerActivity(Id,Act)),not(percept(workerActivity(Id,Act))) 
		do delete(workerActivity(Id,Act)).
		
	%%%%%%%%%%%%%%% --------------------------------------- GOALS --------------------------------------- %%%%%%%%%%%%%%%
	
	% If there is enough resource, build Hatchery
	if bel(minerals(M), M >= 400), bel(builder, target("Zerg Hatchery",N)), not(goal(unitAmount("Zerg Hatchery", N)))
		then adopt(unitAmount("Zerg Hatchery", N)).
		
	% If there is no spawningpool yet, create one
	if not(goal(unitAmount("Zerg Spawning Pool", 1))), bel(builder, not(friendly("Zerg Spawning Pool", _, _, _,_,_))) 
		then adopt(unitAmount("Zerg Spawning Pool", 1)).
		
	% If there is a vespenegeyser and already have more than 5 drones, create an extractor
	if not(goal(unitAmount("Zerg Extractor", 1))), bel(unitAmount("Zerg Drone",N), N > 5), bel(builder, vespeneGeyser(_,_,_,_)) 
		then adopt(unitAmount("Zerg Extractor", 1)).
				
	% If there is an extractor, gather 100 gas
	if bel(unitAmount("Zerg Extractor", _), cost("Metabolic Boost", _, TG), gas(G), G < TG, gasCollector, self(Id, _))
		then adopt(workerActivity(Id, gatheringGas)).
		
	% If the worker is not busy yet, start gathering minerals
	if bel(not(busy), self(Id, _)), not(bel(gasCollector, gas(G), G < 100))
		then adopt(workerActivity(Id, gatheringMinerals)).
}