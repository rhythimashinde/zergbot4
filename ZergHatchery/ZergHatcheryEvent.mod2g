use "../Generic/Generic" as knowledge.
use "../Generic/GenericPercepts" as module.
use ZergHatchery as knowledge.

module ZergHatcheryEvent {
	%%%%%%%%%%%%%%% --------------------------------------- Messaging --------------------------------------- %%%%%%%%%%%%%%%
	
	% If a friendly drone dies, let the Manager know
	forall bel(friendly("Zerg Drone",Id,_,_)), not(percept(unit(true, "Zerg Drone",Id,_,_,_)))
		do (manager).send:(death(Id)).
	
	%%%%%%%%%%%%%%% --------------------------------------- Percepts ---------------------------------------- %%%%%%%%%%%%%%%
	
	% The generic percepts most units use
	if true
		then GenericPercepts.
	
	% The handling of the supply percept
	if percept(resources(_, _, CS, TS)), bel(supply(OCS, OTS), (not(OCS == CS) ; not(OTS == TS)))
		then delete(supply(OCS, OTS)) + insert(supply(CS, TS)).
	
	% The handling of the queueSize percept
	if percept(queueSize(N)), bel(queueSize(No), No \= N)
		then delete(queueSize(No)) + insert(queueSize(N)).
	
	% if getting low on supply, adopt goal to make one
	if bel(not(isMorphing("Zerg Overlord", _)), queueSize(N), N < 2, supply(CS, TS), (TS - CS) < 6), bel(unitAmount("Zerg Overlord", X), NewX is X + 1)
		then adopt(unitAmount("Zerg Overlord", NewX)).
	
	% If there is a Spawning Pool, start making zerglings
	if bel(target("Zerg Zergling",N), friendly("Zerg Spawning Pool", _, _, _)), not(goal(unitAmount("Zerg Zergling", N)))
		then adopt(unitAmount("Zerg Zergling", N)).
		
	% If already enough zerglings attacking, start making drones again
	if bel(unitAmount("Zerg Zergling", N), N > 10)
		then insert(target("Zerg Drone", 6)) + adopt(unitAmount("Zerg Drone", 6)).
	if bel(unitAmount("Zerg Zergling", N), N > 15)
		then insert(target("Zerg Drone", 8)) + adopt(unitAmount("Zerg Drone", 8)).
	if bel(unitAmount("Zerg Zergling", N), N > 20)
		then insert(target("Zerg Drone", 10)) + adopt(unitAmount("Zerg Drone", 10)).
}